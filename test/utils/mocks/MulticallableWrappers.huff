#define function multicall(bytes[] calldata) pure returns (bytes[] memory)
#define function call1() pure returns (uint256)
#define function call2() pure returns (uint256)
#define function call3() pure returns (uint256)
#define function returnsTuple(uint256, uint256) pure returns (uint256, uint256)
#define function revertsNoMsg() pure returns ()
#define function revertsMsg() pure returns ()

#define macro CALL_1() = takes (0) returns (0) {
    0x11 0x00 mstore
    0x20 0x00 return
}

#define macro CALL_2() = takes (0) returns (0) {
    0x22 0x00 mstore
    0x20 0x00 return
}

#define macro CALL_3() = takes (0) returns (0) {
    0x33 0x00 mstore
    0x20 0x00 return
}

#define macro RETURNS_TUPLE() = takes (0) returns (0) {
    0x04 calldataload // [x]
    0x24 calldataload // [y, x]
    0x20 mstore       // [x]
    0x00 mstore       // []
    0x40 0x00 return
}

#define macro REVERTS_NO_MSG() = takes (0) returns (0) {
    0x00 dup1 revert
}

#define macro REVERTS_MSG() = takes (0) returns (0) {
    0x5465737420526576657274000000000000000000000000000000000000000000 
    0x00 mstore
    0x0B 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {
    pc calldataload 0xE0 shr
    dup1 __FUNC_SIG(multicall)    eq multicall     jumpi
    dup1 __FUNC_SIG(call1)        eq call_one      jumpi
    dup1 __FUNC_SIG(call2)        eq call_two      jumpi
    dup1 __FUNC_SIG(call3)        eq call_three    jumpi
    dup1 __FUNC_SIG(returnsTuple) eq returns_tuple jumpi
    dup1 __FUNC_SIG(revertsNoMsg) eq revert_no_msg jumpi
    dup1 __FUNC_SIG(revertsMsg)   eq revert_msg    jumpi

    0x00 dup1 revert

    multicall:
        MULTICALL()
    call_one:
        CALL_1()
    call_two:
        CALL_2()
    call_three:
        CALL_3()
    returns_tuple:
        RETURNS_TUPLE()
    revert_no_msg:
        REVERTS_NO_MSG()
    revert_msg:
        REVERTS_MSG()
}