#define function mulDivDown(uint256,uint256,uint256) pure returns(uint256)
#define function mulDivUp(uint256,uint256,uint256) pure returns(uint256)
#define function rpow(uint256,uint256,uint256) pure returns(uint256)

#define macro MUL_DIV_DOWN_WRAPPER() = takes (0) returns (0) {
    0x44 calldataload // [denominator]
    0x24 calldataload // [y, denominator]
    0x04 calldataload // [x, y, denominator]
    MUL_DIV_DOWN()    // [result]
    0x00 mstore       // []
    0x20 0x00 return
}

#define macro MUL_DIV_UP_WRAPPER() = takes (0) returns (0) {
    0x44 calldataload // [denominator]
    0x24 calldataload // [y, denominator]
    0x04 calldataload // [x, y, denominator]
    MUL_DIV_UP()      // [result]
    0x00 mstore       // []
    0x20 0x00 return
}

#define macro RPOW_WRAPPER() = takes (0) returns (0) {
    0x44 calldataload // [scalar]
    0x24 calldataload // [n, scalar]
    0x04 calldataload // [x, n, scalar]
    RPOW()            // [result]
    0x00 mstore       // []
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    pc calldataload 0xE0 shr
    dup1 __FUNC_SIG(mulDivDown) eq mulDivDown jumpi
    dup1 __FUNC_SIG(mulDivUp)   eq mulDivUp   jumpi
    dup1 __FUNC_SIG(rpow)       eq rpow       jumpi
    mulDivDown:
        MUL_DIV_DOWN_WRAPPER()
    mulDivUp:
        MUL_DIV_UP_WRAPPER()
    rpow:
        RPOW_WRAPPER()
}