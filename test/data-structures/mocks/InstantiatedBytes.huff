#define function concatMemoryAndSet() nonpayable returns (bytes memory)
#define function getStorage(bytes32) view returns (bytes32)

#define macro SET_STOR(offset, value) = takes(2) returns(0) {
    <value> <offset> sstore        // []
}

#define macro GET_STOR(offset) = takes(1) returns(1) {
    <offset> sload        // [value]
}

#define macro GET_STOR_WRAPPER() = takes(0) returns(0) {
    0x04 calldataload GET_STOR()  // [value]
    0x00 mstore                   // []
    0x20 0x00 return              // []
}

#define macro CONCAT_MEMORY_AND_SET() = takes (0) returns (0) {
    pop    // remove func selector

    0x20 0x00 mstore        
    0xbabe1babe1babe1babe1babe1babe1babe1babe1babe1babe1babe1babe1babe 0x20 mstore
    
    0x20 0x40 mstore
    0xbabe2babe2babe2babe2babe2babe2babe2babe2babe2babe2babe2babe2babe 0x60 mstore

    CONCAT_MEMORY(0x00, 0x40)    // [pos]
        
    dup1 mload                   // [len, pos]
    0x00 SET_STOR()              // [pos]
        
    dup1 0x20 add mload          // [babe1, pos]
    0x20 SET_STOR()              // [pos]
        
    0x40 add mload               // [babe2]
    0x40 SET_STOR()              // []
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG("concatMemoryAndSet()") eq concatMemoryAndSet jumpi
    dup1 __FUNC_SIG("getStorage(bytes32)") eq get jumpi
  
    0x00 0x00 revert

    concatMemoryAndSet:
        CONCAT_MEMORY_AND_SET()
    get:
        GET_STOR_WRAPPER()
}