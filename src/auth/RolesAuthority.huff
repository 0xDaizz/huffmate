/* Imports */
#include "./Auth.huff"
#include "../data-structures/Hashmap.huff"

/* Interface */
#define function hasRole(address, uint8) view returns (bool)
#define function doesRoleHaveCapability(uint8, address, bytes4) nonpayable returns (bool)

/* Events */
#define event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled)
#define event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled)
#define event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled)

/* Event Signatures */
#define constant USER_ROLE_UPDATED_SIG = 0x0
#define constant PUBLIC_CAPABILITY_UPDATED_SIG = 0x0
#define constant ROLE_CAPABILITY_UPDATED_SIG = 0x0

/* MAPPINGS */
#define constant USER_ROLES_LOCATION = FREE_STORAGE_POINTER()
#define constant IS_CAPABILITY_PUBLIC_LOCATION = FREE_STORAGE_POINTER()
#define constant GET_ROLES_WITH_CAPABILITY_LOCATION = FREE_STORAGE_POINTER()

/* LEAVE CONSTRUCTOR UNDEFINED TO JUST USE AUTH's CONSTRUCTOR */

/* Helper to get the roles for a user */
#define macro GET_ROLES_FOR_ACCOUNT() = takes (1) returns (1) {
  [USER_ROLES_LOCATION]              // [location, account]
  LOAD_ELEMENT_FROM_KEYS(0x00)       // [roles]
}

/* Does a user have a role? */
#define macro HAS_ROLE() = takes (0) returns (0) {
  0x04 calldataload                  // [account]
  GET_ROLES_FOR_ACCOUNT()            // [roles]
  0x24 calldataload                  // [role, roles]
  shr 0x01 and                       // [authed]
  0x00 mstore                        // []
  0x20 0x00 return                   // []
}

/* Helper to get the role for a capability */
#define macro GET_ROLE_FOR_CAPABILITY() = takes (2) returns (1) {
  LOAD_ELEMENT_FROM_KEYS(0x00)       // [role]
}

/* Checks if a Role has a Capability */
#define macro ROLE_CAPABILITY() = takes (0) returns (0) {
  0x44 calldataload                  // [sig]
  0x24 calldataload                  // [user, sig]
  GET_ROLE_FOR_CAPABILITY()          // [role]
  0x04 calldataload                  // [input, role]
  shr 0x01 and                       // [authed]
  0x00 mstore                        // []
  0x20 0x00 return                   // []
}


/* Main Macro - The contract entrypoint */
#define macro MAIN() = takes(0) returns (0) {
    // Identify which function is being called using the 4 byte function signature
    0x00 calldataload 0xe0 shr
    dup1 0xea7ca276 eq has_role jumpi
    dup1 0xb4bad06a eq role_capability jumpi

    has_role:
      HAS_ROLE()
    role_capability:
      ROLE_CAPABILITY()
}


