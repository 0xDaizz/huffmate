
// Events
#define event OwnerUpdated(address indexed user, address indexed newOwner)
#define event AuthorityUpdated(address indexed user, address indexed newAuthority)

// Event Signatures
#define constant AUTHORITY_UPDATED_SIG = 0xa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198
#define constant OWNER_UPDATED_SIG = 0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76

// Storage Slots
#define constant OWNER = FREE_STORAGE_POINTER()
#define constant AUTHORITY = FREE_STORAGE_POINTER()

///
/// constructor(address _owner, Authority _authority)
///
#define macro CONSTRUCTOR() = takes (0) returns (0) {
  // -------------            --------------------------
  // | OPERATION |            | STACK (POST-OPERATION) |
  // -------------            --------------------------

  // Set the new owner
  0x04 calldataload           // [owner]
  dup1                        // [owner, owner]
  [OWNER]                     // [OWNER, owner, owner]
  sstore                      // [owner]

  // Set the new Authority
  0x24 calldataload           // [authority, owner]
  dup1                        // [authority, authority, owner]
  [AUTHORITY]                 // [AUTHORITY, authority, authority, owner]
  sstore                      // [authority, owner]

  // Emit the authority updated event
  caller                      // [from, authority, owner]
  [AUTHORITY_UPDATED_SIG]     // [sig, from, authority, owner]
  0x20 0x00                   // [0, 32, sig, from, authority, owner]
  log3                        // [owner]

  // Emit the owner updated event
  caller                      // [from, owner]
  [OWNER_UPDATED_SIG]         // [sig, from, owner]
  0x20 0x00                   // [0, 32, sig, from, owner]
  log3                        // []
}

///
/// modifier requiresAuth() virtual
///
#define macro REQUIRES_AUTH() = takes(0) returns(0) {
  // -------------            --------------------------
  // | OPERATION |            | STACK (POST-OPERATION) |
  // -------------            --------------------------

  0x00 calldataload           // [msg.sig]
  caller                      // [msg.sender, msg.sig]
  IS_AUTHORIZED(nauthed)   // []
	nauthed:
    0x00 0x00 revert
}

///
/// function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool)
///
/// - IS_AUTHORIZED macro tries to call `canCall` on the authority if the address(authority) is not 0.
/// - If both canCall returns false and the msg.sender isn't the owner, the nauthed argument will be invoked
///
#define macro IS_AUTHORIZED(nauthed) = takes(2) returns(0) {
  // -------------            --------------------------
  // | OPERATION |            | STACK (POST-OPERATION) |
  // -------------            --------------------------

  /* Input */                 // [user, sig]

  // Continue if address(authority) != address(0), otherwise go to owner check
  [AUTHORITY] sload          // [authority, user, sig]
  dup1                       // [authority, authority, user, sig]
  0x00 eq                    // [authed, authority, user, sig]
  owner_check jumpi          // [authority, user, sig]

  // Store the auth.canCall arguments in memory at offset 0
  // function canCall(address user, address target, bytes4 functionSig) external view returns (bool)
  swap1                      // [user, authority, sig]
  0x00 mstore                // [authority, sig]
  address                    // [address(this), authority, sig]
  0x20 mstore                // [authority, sig]
  swap1                      // [sig, authority]
  0x40 mstore                // [authority]

  // Call auth.canCall
  0x00                       // [retOffset, authority] - store the return data at memory offset 0
  0x60                       // [argSize, retOffset, authority] - three argument slots
  0x00                       // [argOffset, argSize, retOffset, authority] - arguments stored in memory at offset 0
  0x00                       // [value, argOffset, argSize, retOffset, authority]
  0x20                       // [retSize, value, argOffset, argSize, retOffset, authority] - returns a bool in one slot
  swap5                      // [authority, value, argOffset, argSize, retOffset, retSize] - authority is the target
  0x00                       // [gas, authority, value, argOffset, argSize, retOffset, retSize]
  call                       // [authed]
  iszero owner_check jumpi   // []

  // Jump to nauthed if msg.sender != owner
  owner_check:
    caller                      // [msg.sender]
    [OWNER] sload               // [owner, msg.sender]
    eq                          // [authed]
    iszero <nauthed> jumpi   // []
}


///
/// function setAuthority(Authority newAuthority) public virtual
///
#define macro SET_AUTHORITY() = takes(1) returns(0) {
  // -------------            --------------------------
  // | OPERATION |            | STACK (POST-OPERATION) |
  // -------------            --------------------------

  // Check that the caller is authorized
  REQUIRES_AUTH()

  // Set the new authority
  0x04 calldataload           // [newAuthority]
  dup1                        // [newAuthority, newAuthority]
  [AUTHORITY] sstore          // []

  // Emit the authority updated event
  caller                      // [from, newAuthority]
  [AUTHORITY_UPDATED_SIG]     // [sig, from, newAuthority]
  0x20 0x00                   // [0, 32, sig, from, newAuthority]
  log3                        // []
}

///
/// function setOwner(address newOwner) public virtual
///
#define macro SET_OWNER() = takes(1) returns(0) {
  // -------------            --------------------------
  // | OPERATION |            | STACK (POST-OPERATION) |
  // -------------            --------------------------

  // Check that the caller is authorized
  REQUIRES_AUTH()

  // Set the new owner
  0x04 calldataload           // [newOwner]
  dup1                        // [newOwner, newOwner]
  [OWNER] sstore              // []

  // Emit the owner updated event
  caller                      // [from, newOwner]
  [OWNER_UPDATED_SIG]         // [sig, from, newOwner]
  0x20 0x00                   // [0, 32, sig, from, newOwner]
  log3                        // []
}

///
/// Main Macro - The contract entrypoint
///
#define macro MAIN() = takes(0) returns (0) {
    // Identify which function is being called using the 4 byte function signature
    0x00 calldataload 0xE0 shr
    dup1 0x13af4035 eq set_owner jumpi
    dup1 0x7a9e5e4b eq set_authority jumpi

    set_owner:
        SET_OWNER()
    set_authority:
        SET_AUTHORITY()
}
