#define function mulDivDown(uint256,uint256,uint256) pure returns(uint256)
#define function mulDivUp(uint256,uint256,uint256) pure returns(uint256)
#define function rpow(uint256,uint256,uint256) pure returns(uint256)

#define constant MEM_PTR = FREE_STORAGE_POINTER()

// https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol#L34
#define macro MUL_DIV_DOWN() = takes (0) returns (0) {
    0x04 calldataload // [x]
    0x24 calldataload // [y, x]
    mul               // [x * y]
    [MEM_PTR]
    mstore            // []

    0x44 calldataload // [denominator]
    iszero
    iszero            // [denominator != 0]

    0x04 calldataload // [x, denominator != 0]
    iszero            // [x == 0, denominator != 0]

    0x04 calldataload // [x, x == 0, denominator != 0]
    [MEM_PTR] mload   // [x * y, x, x == 0, denominator != 0]
    div               // [(x * y) / x, x == 0, denominator != 0]

    0x24 calldataload // [y, (x * y) / x, x == 0, denominator != 0]
    eq                // [y == (x * y) / x, x == 0, denominator != 0]
    or                // [y == (x * y) / x | x == 0, denominator != 0]
    and               

    iszero err jumpi  // Revert if (y == (x * y) / x | x == 0) & denominator != 0 is not satisfied

    0x44 calldataload // [denominator]
    [MEM_PTR] mload   // [x * y, denominator]
    div               // [(x * y) / denominator]

    [MEM_PTR] mstore  // []

    // Return 32 byte result stored at [MEM_PTR]
    0x20 [MEM_PTR] return

    err:
        0x00 0x00 revert
}

// https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol#L53
#define macro MUL_DIV_UP() = takes (0) returns (0) {
    0x04 calldataload // [x]
    0x24 calldataload // [y, x]
    mul               // [x * y]
    [MEM_PTR] mstore  // []

    0x44 calldataload // [denominator]
    iszero
    iszero            // [denominator != 0]

    0x04 calldataload // [x, denominator != 0]
    iszero            // [x == 0, denominator != 0]

    0x04 calldataload // [x, x == 0, denominator != 0]
    [MEM_PTR] mload   // [x * y, x, x == 0, denominator != 0]
    div               // [(x * y) / x, x == 0, denominator != 0]

    0x24 calldataload // [y, (x * y) / x, x == 0, denominator != 0]
    eq                // [y == (x * y) / x, x == 0, denominator != 0]
    or                // [y == (x * y) / x | x == 0, denominator != 0]
    and               // [y == (x * y) / x | x == 0 & denominator != 0]

    iszero err jumpi  // Revert if (y == (x * y) / x | x == 0) & denominator != 0 is not satisfied

    [MEM_PTR] mload   // [x * y]
    iszero            // [x * y == 0]
    iszero            // [x * y != 0]

    0x44 calldataload // [denominator, x * y != 0]
    0x01              // [1, denominator, x * y != 0]
    [MEM_PTR] mload   // [x * y, 1, denominator, x * y != 0]
    sub               // [x * y - 1, denominator, x * y != 0]
    div               // [x * y - 1 / denominator, x * y != 0]
    0x01              // [1, x * y - 1 / denominator, x * y != 0]
    add               // [(x * y - 1 / denominator) + 1, x * y != 0]

    mul               // [((x * y - 1 / denominator) + 1) * (x * y != 0)]
    [MEM_PTR] mstore  // []

    // Return 32 byte result stored at [MEM_PTR]
    0x20 [MEM_PTR] return

    err:
        0x00 0x00 revert
}

#define macro RPOW() = takes (0) returns (0) {
    0x04 calldataload           // [x]

    iszero zero jumpi           // Jump to "zero" if x == 0
    0x01 default jumpi          // Jump to "default" if x != 0

    zero:
        0x24 calldataload       // [n]

        iszero zero_inner jumpi // If n == 0 && x == 0, return the scalar (0 ** 0 = 1).
        zero_default jumpi      // If n != 0 && x == 0, return 0.

        // 0 ** 0 = 1
        zero_inner:
            0x44 calldataload   // [scalar, n]
            0x00 mstore         // Set result = scalar
            0x20 0x00 return
        // 0 ** n = 0
        zero_default:
            // 0x00 is blank, no need to set it.
            0x20 0x00 return
    default:
        0x02                    // [2]
        0x24 calldataload       // [n, 2]
        mod                     // [n % 2]
        
        iszero even jumpi       // Set result to scalar for now if n % 2 is even
        0x01 odd jumpi          // Set result to x for now if n % 2 is odd

        // n % 2 is even
        even:
            0x44 calldataload   // [scalar]
            0x60 mstore         // []
            0x01 pre_loop jumpi // Continue through default case
        // n % 2 is odd
        odd:
            0x04 calldataload   // [x]
            0x60 mstore         // []
            0x01 pre_loop jumpi // Continue through default case
        pre_loop:
            0x44 calldataload   // [scalar]
            0x01 shr            // [scalar >> 1]
            0x00 mstore         // []

            0x04 calldataload   // [x]
            0x20 mstore         // []

            0x24 calldataload   // [n]
            0x40 mstore         // []

            0x01 loop jumpi     // Start loop
        loop:
            0x40 mload          // [n]
            dup1                // [n, n]

            iszero finish jumpi // If n = 0, the loop is finished.

            // Divide n by 2
            0x01 shr            // [n >> 1]
            0x40 mstore         // []

            // Revert if x ** 2 will overflow.
            0x20 mload          // [x]
            0x80 shr            // [x >> 128]
            fail jumpi

            // Square x and duplicate it on the stack for use later.
            0x20 mload          // [x]
            dup1 mul            // [x * x]
            dup1                // [x * x, x * x]

            // Add x ** 2 to scalar >> 1
            0x00 mload          // [scalar >> 1, x * x, x * x]
            add                 // [(scalar >> 1) + (x * x), x * x]

            // Revert if x ** 2 + scalar >> 1 overflowed
            swap1               // [x * x, (scalar >> 1) + (x * x)]
            dup2                // [(scalar >> 1) + (x * x), x * x, (scalar >> 1) + (x * x)]
            lt fail jumpi       // [(scalar >> 1) + (x * x)]

            // Set x to ((scalar >> 1) + (x * x)) / scalar
            0x44 calldataload   // [scalar, (scalar >> 1) + (x * x)]
            swap1               // [(scalar >> 1) + (x * x), scalar]
            div                 // [((scalar >> 1) + (x * x)) / scalar]
            0x20 mstore         // []

            0x02                // [2]
            0x40 mload          // [n, 2]
            mod                 // [n % 2]

            // If n is odd, continue logic
            odd_inner jumpi
            // If n is even, continue loop
            0x01 loop jumpi
        odd_inner:
            // Multiply x * result
            0x60 mload          // [result]
            0x20 mload          // [x, result]
            mul                 // [x * result]
            dup1                // [x * result, x * result]
            dup1                // [x * result, x * result, x * result]

            // Check if x * result overflowed
            0x20 mload          // [x, x * result, x * result, x * result]
            swap1               // [x * result, x, x * result, x * result]
            div                 // [x * result / x, x * result, x * result]
            0x60 mload          // [result, x * result / x, x * result, x * result]
            eq iszero           // [result != (x * result / x), x * result, x * result]
            0x20 mload          // [x, result != (x * result / x), x * result, x * result]
            iszero iszero       // [x != 0, result != (x * result / x), x * result, x * result]
            and fail jumpi      // Revert if x * result overflowed

            // Round to the nearest number
            0x00 mload          // [scalar >> 1, x * result, x * result]
            add                 // [(scalar >> 1) + (x * result), x * result]

            // Check if x ** 2 + scalar >> 1 overflowed
            dup1                // [(scalar >> 1) + (x * result), (scalar >> 1) + (x * result), x * result]
            swap2               // [x * result, (scalar >> 1) + (x * result), (scalar >> 1) + (x * result)]
            swap1               // [(scalar >> 1) + (x * result), x * result, (scalar >> 1) + (x * result)]
            lt fail jumpi       // Revert if ((scalar >> 1) + (x * result)) < x * result

            // Scale rounded result
            0x44 calldataload   // [scalar, (scalar >> 1) + (x * result)]
            swap1               // [(scalar >> 1) + (x * result), scalar]
            div                 // [((scalar >> 1) + (x * result)) / scalar]
            0x60 mstore         // []

            0x01 loop jumpi     // Continue loop
        // Return result
        finish:
            0x20 0x60 return
        // Revert
        fail:
            0x00 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 0xb67bee04 eq mulDivDown jumpi
    dup1 0x12bd6ac0 eq mulDivUp   jumpi
    dup1 0x67b870af eq rpow       jumpi

    mulDivDown:
        MUL_DIV_DOWN()
    mulDivUp:
        MUL_DIV_UP()
    rpow:
        RPOW()
}