
// Receives ether
#define function isPayable() payable returns (uint256)
#define function nonPayable() nonpayable returns (uint256)

// Match the function selector
#define macro MAIN() = takes (0) returns (0) {
    pc calldataload 0xe0 shr

    dup1 __FUNC_SIG(isPayable) eq payable_jump jumpi
    dup1 __FUNC_SIG(nonPayable) eq non_payable_jump jumpi

    // Revert if no function selectors match
    reverts:
        0x00 dup1 revert

    non_payable_jump:
        callvalue iszero iszero reverts jumpi
    payable_jump:
        balance 0x00 mstore
        0x20 0x00 return
}

/// @title Ethers
/// @notice SPDX-License-Identifier: MIT
/// @author asnared <https://github.com/abigger87>
/// @notice Utilities for working with ether at a low level

/// @notice Sends an amount of ether to the specified [amount, address]
#define macro SEND_ETH() = takes (2) returns (1) {
    // Input Stack: [amount, address]

    // Send the ether
    0x00    // [0, amount, address]
    dup1    // [0, 0, amount, address]
    dup1    // [0, 0, 0, amount, address]
    dup1    // [0, 0, 0, 0, amount, address]
    dup5    // [amount, 0, 0, 0, 0, amount, address]
    dup7    // [address, amount, 0, 0, 0, 0, amount]
    gas     // [gas, address, amount, 0, 0, 0, 0, amount, address]
    call    // [success, amount, address]

    // Clean the stack
    swap2   // [address, amount, success]
    pop     // [success, address]
    pop     // [success]
}