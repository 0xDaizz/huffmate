/// @title Calls
/// @author asnared <https://github.com/abigger87>
/// @notice Calls is a library of utility functions for calling contracts

/// @notice Calls a contract with the given arguments
/// @notice Returns the success of the call
/// @notice Returndata is left in memory for the caller to handle
#define macro CALL(
    ret_size,
    ret_offset,
    arg_size,
    arg_offset,
    value,
    to
) = takes (0) returns (1) {
    <ret_size>              // [retSize]
    <ret_offset>            // [retOffset, retSize]
    <arg_size>              // [argSize, retOffset, retSize]
    <arg_offset>            // [argOffset, argSize, retOffset, retSize]
    <value>                 // [value, argOffset, argSize, retOffset, retSize]
    <to>                    // [to, value, argOffset, argSize, retOffset, retSize]
    gas                     // [gas, to, value, argOffset, argSize, retOffset, retSize]
    call                    // [success]
}

/// @notice Staticalls a contract with the given arguments
/// @notice Returns the success of the call
/// @notice Returndata is left in memory for the caller to handle
/// @dev This instructions is equivalent to CALL, except that it does not allow any state modifying instructions or sending ETH in the sub context.
/// @dev The disallowed instructions are CREATE, CREATE2, LOG0, LOG1, LOG2, LOG3, LOG4, SSTORE, SELFDESTRUCT and CALL if the value sent is not 0.
/// @dev If the size of the return data is not known, it can also be retrieved after the call with the instructions RETURNDATASIZE and RETURNDATACOPY (since the Byzantium fork).
#define macro STATICCALL(
    ret_size,
    ret_offset,
    arg_size,
    arg_offset,
    to
) = takes (0) returns (1) {
    <ret_size>              // [retSize]
    <ret_offset>            // [retOffset, retSize]
    <arg_size>              // [argSize, retOffset, retSize]
    <arg_offset>            // [argOffset, argSize, retOffset, retSize]
    <to>                    // [to, argOffset, argSize, retOffset, retSize]
    gas                     // [gas, to, argOffset, argSize, retOffset, retSize]
    staticcall              // [success]
}

/// @notice Codecalls a contract with the given arguments
/// @notice Returns the success of the call
/// @notice Returndata is left in memory for the caller to handle
/// @dev Creates a new sub context as if calling itself, but with the code of the given account.
/// @dev In particular the storage remains the same. Note that an account with no code will return success as true.
/// @dev If the size of the return data is not known, it can also be retrieved after the call with the instructions RETURNDATASIZE and RETURNDATACOPY (since the Byzantium fork).
#define macro CALLCODE(
    ret_size,
    ret_offset,
    arg_size,
    arg_offset,
    value,
    to
) = takes (0) returns (1) {
    <ret_size>              // [retSize]
    <ret_offset>            // [retOffset, retSize]
    <arg_size>              // [argSize, retOffset, retSize]
    <arg_offset>            // [argOffset, argSize, retOffset, retSize]
    <value>                 // [value, argOffset, argSize, retOffset, retSize]
    <to>                    // [to, argOffset, argSize, retOffset, retSize]
    gas                     // [gas, to, argOffset, argSize, retOffset, retSize]
    callcode                // [success]
}
