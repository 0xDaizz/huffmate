/// @title Refunded
/// @notice SPDX-License-Identifier: MIT
/// @author asnared <https://github.com/abigger87>
/// @notice Efficient gas refunds distributed through a modifier
/// @notice Adapted from Zolidity (https://github.com/z0r0z/zolidity/blob/main/src/utils/Refunded.sol)

#include "./Errors.huff"
#include "./ReentrancyGuard.huff"

/// @notice The base cost of refunding
#define constant BASE_COST = 25433

/// @notice The maximum amount of gas that can be refunded
#define constant GAS_PRICE_MAX = 4e10

// Refunded custom errors
#define constant MAX_GAS_ERROR = 0x4d41585f47415300000000000000000000000000000000000000000000000000
#define constant MAX_GAS_LENGTH = 0x07

/// @notice Refunds contract calls up to a maximum of 4e10 gas
/// @notice Modified functions over 21k gas benefit most from a refund
#define macro REFUNDED() = takes (0) returns (0) {
    // Get the starting amount of gas
    gas                                 // [gasLeft]

    // Prevent Reentrancy
    LOCK()                              // [gasLeft]

    basefee [GAS_PRICE_MAX] add         // [currMaxGas, gasLeft]
    gasprice gt iszero                  // [!(gasPrice > currMaxGas), gasLeft]
    __Safe_Gas_Refund__j jumpi          // [gasLeft]
        MAX_GAS(0x00)

    __Safe_Gas_Refund__j:

    // TODO: how to inline other calls?
    // _;

    // Calculate refund amount
    gas swap1 sub                       // [gasUsed]
    [BASE_COST] add                     // [gasUsed + BASE_COST]
    gasprice mul                        // [(gasUsed + BASE_COST) * gasPrice]

    // Refund the gas to origin
    // TODO:
    origin
    call


    // Finally, unlock the guard
    UNLOCK()
}

/// @notice Reverts with an "MAX_GAS" message if the condition is false
#define macro MAX_GAS(condition) = takes (0) returns (0) {
    [MAX_GAS_ERROR]                 // ["MAX_GAS"]
    [MAX_GAS_LENGTH]                // [7 (length), "MAX_GAS"]
    <condition>                     // [condition, 7 (length), "MAX_GAS"]
    REQUIRE()                       // []
}