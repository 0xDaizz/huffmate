/// @title TSOwnable
/// @notice SPDX-License-Identifier: MIT
/// @author merkleplant (modified by @devtooligan)
/// @notice An Ownable Implementation using Two-Step Transfer Pattern

#include "./Address.huff"
#include "./Errors.huff"
#include "../auth/NonPayable.huff"

// External Interface

/// @notice Returns the current owner address.
#define function owner() view returns (address)

/// @notice Returns the current pending owner address.
#define function pendingOwner() view returns (address)

/// @notice Sets the pending owner address.
/// @dev Only callable by owner.
#define function setPendingOwner(address) nonpayable returns ()

/// @notice Accepts the ownership.
/// @dev Only callable by pending owner.
#define function acceptOwnership() nonpayable returns ()

/// @notice Emitted when new owner set.
#define event NewOwner(address,address)

/// @notice Emitted when new pending owner set.
#define event NewPendingOwner(address,address)

// Event Signatures

// cast keccak "NewOwner(address,address)"
#define constant EVENT_NEW_OWNER
    = 0x70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364
// cast keccak "NewPendingOwner(address,address)"
#define constant EVENT_NEW_PENDING_OWNER
    = 0xb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b

// Storage
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant PENDING_OWNER_SLOT = FREE_STORAGE_POINTER()

// Error Constants

#define constant ONLY_OWNER_ERROR = 0x4F4E4C595F4F574E455200000000000000000000000000000000000000000000
#define constant ONLY_OWNER_LENGTH = 0x0a

#define constant ONLY_PENDING_OWNER_ERROR = 0x4F4E4C595F50454E44494E475F4F574E45520000000000000000000000000000
#define constant ONLY_PENDING_OWNER_LENGTH = 0x12

#define constant ALREADY_OWNER_ERROR = 0x414C52454144595F4F574E455200000000000000000000000000000000000000
#define constant ALREADY_OWNER_LENGTH = 0x0d

// Constructor

#define macro CONSTRUCTOR_TSOWNABLE() = takes (0) returns (0) {
    caller [OWNER_SLOT] sstore  // Store msg.sender as owner
}

// Access Handler

#define macro ONLY_OWNER() = takes(0) returns (0) {
    [ONLY_OWNER_ERROR]                  // ["ONLY_OWNER"]
    [ONLY_OWNER_LENGTH]                 // [10 (length), "ONLY_OWNER"]
    [OWNER_SLOT] sload caller eq not    // [isNotOwner, 10 (length), "ONLY_OWNER"]
    REQUIRE()
}

#define macro ONLY_PENDING_OWNER() = takes (0) returns (0) {
    [ONLY_PENDING_OWNER_ERROR]                  // ["ONLY_PENDING_OWNER"]
    [ONLY_PENDING_OWNER_LENGTH]                 // [18 (length), "ONLY_PENDING_OWNER"]
    [PENDING_OWNER_SLOT] sload caller eq not    // [isNotPendingOwner, 18 (length), "ONLY_PENDING_OWNER"]
    REQUIRE()
}

// Mutating Functions

#define macro OWNABLE_SET_PENDING_OWNER() = takes (0) returns (0) {
    NON_PAYABLE()
    ONLY_OWNER()

    // Read argument and mask to address
    0x04 calldataload MASK_ADDRESS()            // [newOwner]

    // Revert if address equals owner
    [ALREADY_OWNER_ERROR]                       // ["ALREADY_OWNER", newOwner]
    [ALREADY_OWNER_LENGTH]                      // [13 (length), "ALREADY_OWNER", newOwner]
    dup3 caller eq not                          // [isNotAlreadyOwner, 13 (length), "ALREADY_OWNER", newOwner]
    REQUIRE()                                   // [newOwner]

    // Duplicate address on stack
    dup1

    // Emit NewPendingOwner event
    [OWNER_SLOT] sload [EVENT_NEW_PENDING_OWNER] 0x00 0x00
    log3

    // Store address as pending owner
    [PENDING_OWNER_SLOT] sstore

    stop
}

#define macro OWNABLE_ACCEPT_OWNERSHIP() = takes (0) returns (0) {
    NON_PAYABLE()
    ONLY_PENDING_OWNER()

    // Emit NewOwner event
    caller [OWNER_SLOT] sload [EVENT_NEW_OWNER] 0x00 0x00
    log3

    // Store msg.sender as owner
    caller [OWNER_SLOT] sstore

    // Clear pending owner
    0x00 [PENDING_OWNER_SLOT] sstore

    stop
}

// View Functions

#define macro OWNABLE_GET_OWNER() = takes (0) returns (0) {
    NON_PAYABLE()
    [OWNER_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro OWNABLE_GET_PENDING_OWNER() = takes (0) returns (0) {
    NON_PAYABLE()
    [PENDING_OWNER_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

// Function Dispatching
#define macro MAIN_TSOWNABLE() = takes (0) returns (0) {
    dup1 __FUNC_SIG(setPendingOwner) eq set_pending_owner jumpi
    dup1 __FUNC_SIG(acceptOwnership) eq accept_ownership jumpi
    dup1 __FUNC_SIG(owner) eq get_owner jumpi
    dup1 __FUNC_SIG(pendingOwner) eq get_pending_owner jumpi

    not_found jump

    set_pending_owner:
        OWNABLE_SET_PENDING_OWNER()
    accept_ownership:
        OWNABLE_ACCEPT_OWNERSHIP()
    get_owner:
        OWNABLE_GET_OWNER()
    get_pending_owner:
        OWNABLE_GET_PENDING_OWNER()

    not_found:
}
