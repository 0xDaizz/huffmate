/// @title ERC4626
/// @author asnared <https://github.com/abigger87>
/// @notice Minimal ERC4626 tokenized Vault implementation.
/// @notice Adapted from Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)

// ERC4626 is ERC20
#include "./ERC20.huff"

// Events
#define event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares)
#define event Withdraw(address indexed caller, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)

// Interface

// TODO: Grab dynamic constructor args

// Storage
#define constant ASSET_SLOT = FREE_STORAGE_POINTER()


/// @notice Constructor
#define macro INNER_4626_CONSTRUCTOR() = takes (0) returns (0) {
    // Copy the asset address into memory and then the stack from the bytecode
    0x20                    // [size] - byte size to copy
    0x20 codesize sub       // [offset, size] - offset in the code to copy from
    0x00                    // [mem, offset, size] - offset in memory to copy to
    codecopy                // []
    0x00 mload              // [asset]

    // Store the decimals function selector in memory to call
    __FUNC_SIG(decimals)    // [sig_right_padded, asset]
    0xE0 shl                // [sig_left_padded, asset]
    0x20 mstore             // [asset]

    // Call the asset to get its decimals
    0x20                    // [retSize, asset]
    0x00                    // [retOffset, retSize, asset]
    0x04                    // [argSize, retOffset, retSize, asset]
    0x20                    // [argOffset, argSize, retOffset, retSize, asset]
    dup5                    // [to, argOffset, argSize, retOffset, retSize, asset]
    gas                     // [gas, to, argOffset, argSize, retOffset, retSize, asset]
    staticcall              // [success, asset]

    // If the call failed, revert
    iszero iszero           // [success, asset]
    cont jumpi              // [asset]
    0x00 dup1 revert        // []
    cont:

    // Store the decimals
    0x00 mload              // [decimals, asset]
    [DECIMALS_SLOT] sstore  // [asset]

    // Store the asset
    [ASSET_SLOT] sstore     // []

    // Configure the initial domain separator
    chainid [INITIAL_CHAIN_ID] sstore       // []
    COMPUTE_DOMAIN_SEPARATOR()              // [DOMAIN SEPARATOR]
    [INITIAL_DOMAIN_SEPARATOR] sstore       // []

    // TODO: here is where we should set the name, and symbol storage variables

    // Allow execution to continue for parent construction
}

/// @notice Returns the ERC4626 decimals
#define macro ERC4626_DECIMALS() = takes (0) returns (0) {
    [DECIMALS_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

/// @notice An internal function dispatcher
#define macro INNER_4626_MAIN() = takes (1) returns (1) {
    // Input stack: [func_selector]
    // Output stack: [func_selector]

    dup1 __FUNC_SIG(decimals) eq decimals_jump jumpi    // [func_selector]
    MAIN_ERC20()                                        // [func_selector]

    cont jump

    decimals_jump:
        ERC4626_DECIMALS()

    // Resume parent dispatching
    cont:
}