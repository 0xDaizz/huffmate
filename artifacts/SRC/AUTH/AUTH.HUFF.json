{"file":{"path":"src/auth/Auth.huff","source":"\n// Events\n#define event OwnerUpdated(address indexed user, address indexed newOwner)\n#define event AuthorityUpdated(address indexed user, address indexed newAuthority)\n\n// Event Signatures\n#define constant AUTHORITY_UPDATED_SIG = 0xa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198\n#define constant OWNER_UPDATED_SIG = 0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76\n\n// Storage Slots\n#define constant OWNER = FREE_STORAGE_POINTER()\n#define constant AUTHORITY = FREE_STORAGE_POINTER()\n\n///\n/// constructor(address _owner, Authority _authority)\n///\n#define macro CONSTRUCTOR() = takes (0) returns (0) {\n  // -------------            --------------------------\n  // | OPERATION |            | STACK (POST-OPERATION) |\n  // -------------            --------------------------\n\n  // Set the new owner\n  0x04 calldataload           // [owner]\n  dup1                        // [owner, owner]\n  [OWNER]                     // [OWNER, owner, owner]\n  sstore                      // [owner]\n\n  // Set the new Authority\n  0x24 calldataload           // [authority, owner]\n  dup1                        // [authority, authority, owner]\n  [AUTHORITY]                 // [AUTHORITY, authority, authority, owner]\n  sstore                      // [authority, owner]\n\n  // Emit the authority updated event\n  caller                      // [from, authority, owner]\n  [AUTHORITY_UPDATED_SIG]     // [sig, from, authority, owner]\n  0x20 0x00                   // [0, 32, sig, from, authority, owner]\n  log3                        // [owner]\n\n  // Emit the owner updated event\n  caller                      // [from, owner]\n  [OWNER_UPDATED_SIG]         // [sig, from, owner]\n  0x20 0x00                   // [0, 32, sig, from, owner]\n  log3                        // []\n}\n\n///\n/// modifier requiresAuth() virtual\n///\n#define macro REQUIRES_AUTH() = takes(0) returns(0) {\n  // -------------            --------------------------\n  // | OPERATION |            | STACK (POST-OPERATION) |\n  // -------------            --------------------------\n\n  0x00 calldataload           // [msg.sig]\n  caller                      // [msg.sender, msg.sig]\n  IS_AUTHORIZED(nauthed)   // []\n\tnauthed:\n    0x00 0x00 revert\n}\n\n///\n/// function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool)\n///\n/// - IS_AUTHORIZED macro tries to call `canCall` on the authority if the address(authority) is not 0.\n/// - If both canCall returns false and the msg.sender isn't the owner, the nauthed argument will be invoked\n///\n#define macro IS_AUTHORIZED(nauthed) = takes(2) returns(0) {\n  // -------------            --------------------------\n  // | OPERATION |            | STACK (POST-OPERATION) |\n  // -------------            --------------------------\n\n  /* Input */                 // [user, sig]\n\n  // Continue if address(authority) != address(0), otherwise go to owner check\n  [AUTHORITY] sload          // [authority, user, sig]\n  dup1                       // [authority, authority, user, sig]\n  0x00 eq                    // [authed, authority, user, sig]\n  owner_check jumpi          // [authority, user, sig]\n\n  // Store the auth.canCall arguments in memory at offset 0\n  // function canCall(address user, address target, bytes4 functionSig) external view returns (bool)\n  swap1                      // [user, authority, sig]\n  0x00 mstore                // [authority, sig]\n  address                    // [address(this), authority, sig]\n  0x20 mstore                // [authority, sig]\n  swap1                      // [sig, authority]\n  0x40 mstore                // [authority]\n\n  // Call auth.canCall\n  0x00                       // [retOffset, authority] - store the return data at memory offset 0\n  0x60                       // [argSize, retOffset, authority] - three argument slots\n  0x00                       // [argOffset, argSize, retOffset, authority] - arguments stored in memory at offset 0\n  0x00                       // [value, argOffset, argSize, retOffset, authority]\n  0x20                       // [retSize, value, argOffset, argSize, retOffset, authority] - returns a bool in one slot\n  swap5                      // [authority, value, argOffset, argSize, retOffset, retSize] - authority is the target\n  0x00                       // [gas, authority, value, argOffset, argSize, retOffset, retSize]\n  call                       // [authed]\n  iszero owner_check jumpi   // []\n\n  // Jump to nauthed if msg.sender != owner\n  owner_check:\n    caller                      // [msg.sender]\n    [OWNER] sload               // [owner, msg.sender]\n    eq                          // [authed]\n    iszero <nauthed> jumpi   // []\n}\n\n\n///\n/// function setAuthority(Authority newAuthority) public virtual\n///\n#define macro SET_AUTHORITY() = takes(1) returns(0) {\n  // -------------            --------------------------\n  // | OPERATION |            | STACK (POST-OPERATION) |\n  // -------------            --------------------------\n\n  // Check that the caller is authorized\n  REQUIRES_AUTH()\n\n  // Set the new authority\n  0x04 calldataload           // [newAuthority]\n  dup1                        // [newAuthority, newAuthority]\n  [AUTHORITY] sstore          // []\n\n  // Emit the authority updated event\n  caller                      // [from, newAuthority]\n  [AUTHORITY_UPDATED_SIG]     // [sig, from, newAuthority]\n  0x20 0x00                   // [0, 32, sig, from, newAuthority]\n  log3                        // []\n}\n\n///\n/// function setOwner(address newOwner) public virtual\n///\n#define macro SET_OWNER() = takes(1) returns(0) {\n  // -------------            --------------------------\n  // | OPERATION |            | STACK (POST-OPERATION) |\n  // -------------            --------------------------\n\n  // Check that the caller is authorized\n  REQUIRES_AUTH()\n\n  // Set the new owner\n  0x04 calldataload           // [newOwner]\n  dup1                        // [newOwner, newOwner]\n  [OWNER] sstore              // []\n\n  // Emit the owner updated event\n  caller                      // [from, newOwner]\n  [OWNER_UPDATED_SIG]         // [sig, from, newOwner]\n  0x20 0x00                   // [0, 32, sig, from, newOwner]\n  log3                        // []\n}\n\n///\n/// Main Macro - The contract entrypoint\n///\n#define macro MAIN() = takes(0) returns (0) {\n    // Identify which function is being called using the 4 byte function signature\n    0x00 calldataload 0xE0 shr\n    dup1 0x13af4035 eq set_owner jumpi\n    dup1 0x7a9e5e4b eq set_authority jumpi\n\n    set_owner:\n        SET_OWNER()\n    set_authority:\n        SET_AUTHORITY()\n}\n","access":null,"dependencies":[]},"bytecode":"6004358060005560243580600155337fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019860206000a3337f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7660206000a36100f8806100696000396000f360003560e01c806313af40351461001c5780637a9e5e4b1461008a575b600035336001548060001461004b5790600052306020529060405260006060600060006020946000f11561004b575b336000541415610056575b60006000fd60043580600055337f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7660206000a35b60003533600154806000146100b95790600052306020529060405260006060600060006020946000f1156100b9575b3360005414156100c4575b60006000fd60043580600155337fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019860206000a3","runtime":"60003560e01c806313af40351461001c5780637a9e5e4b1461008a575b600035336001548060001461004b5790600052306020529060405260006060600060006020946000f11561004b575b336000541415610056575b60006000fd60043580600055337f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7660206000a35b60003533600154806000146100b95790600052306020529060405260006060600060006020946000f1156100b9575b3360005414156100c4575b60006000fd60043580600155337fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019860206000a3","abi":{"constructor":{"inputs":[]},"functions":{},"events":{"AuthorityUpdated":{"name":"AuthorityUpdated","inputs":[{"name":"user","kind":"Address","indexed":false},{"name":"newAuthority","kind":"Address","indexed":false}],"anonymous":false},"OwnerUpdated":{"name":"OwnerUpdated","inputs":[{"name":"user","kind":"Address","indexed":false},{"name":"newOwner","kind":"Address","indexed":false}],"anonymous":false}},"receive":false,"fallback":false}}